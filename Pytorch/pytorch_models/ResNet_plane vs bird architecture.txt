class ResBlock(nn.Module):
    def __init__(self, n_chans):
        super(ResBlock, self).__init__()
        
        self.conv = nn.Conv2d(n_chans, n_chans, kernel_size=(3, 3), padding=1)
        self.bn = nn.BatchNorm2d(num_features=n_chans)
        
    def forward(self, t):
        x = torch.relu(self.bn(self.conv(t)))
        return x + t

______________________________________________________________________________

class NetResDeep(nn.Module):
    def __init__(self, n_chans1 = 32, n_blocks = 10):
        super(NetResDeep, self).__init__()
        
        self.n_chans1 = n_chans1
        self.conv1 = nn.Conv2d(3, n_chans1, kernel_size=(3, 3), padding=1)
        self.bn1 = nn.BatchNorm2d(num_features=n_chans1)
        
        self.resblocks = nn.Sequential( * (n_blocks * [ResBlock(n_chans=n_chans1)]))
        
        self.fc1 = nn.Linear(8 * 8 * n_chans1, 32)
        self.fc2 = nn.Linear(32, 2)
    
    def forward(self, t):
        x = self.bn1(self.conv1(t))
        x = F.max_pool2d(torch.relu(x), 2)
        x = self.resblocks(x)
        x = F.max_pool2d(x, 2)
        x = x.view(-1, 8*8*self.n_chans1)
        x = torch.relu(self.fc1(x))
        return self.fc2(x)
